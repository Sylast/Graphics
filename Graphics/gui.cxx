// generated by Fast Light User Interface Designer (fluid) version 1.0108

#include "gui.h"

void GUI::cb_DBG_i(Fl_Button*, void*) {
	DBG_cb();
}
void GUI::cb_DBG(Fl_Button* o, void* v) {
	((GUI*)(o->parent()->user_data()))->cb_DBG_i(o,v);
}

void GUI::cb_New_i(Fl_Menu_*, void*) {
	new_cb();
}
void GUI::cb_New(Fl_Menu_* o, void* v) {
	((GUI*)(o->parent()->user_data()))->cb_New_i(o,v);
}
void GUI::cb_Save_i(Fl_Menu_*, void*) {
	save_cb();
}
void GUI::cb_Save(Fl_Menu_* o, void* v) {
	((GUI*)(o->parent()->user_data()))->cb_Save_i(o,v);
}
void GUI::cb_Open_i(Fl_Menu_*, void*) {
	open_cb();
}
void GUI::cb_Open(Fl_Menu_* o, void* v) {
	((GUI*)(o->parent()->user_data()))->cb_Open_i(o,v);
}

Fl_Menu_Item GUI::menu_File[] = {
	{"New", 0, (Fl_Callback*)GUI::cb_New, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
	{"Save", 0,  (Fl_Callback*)GUI::cb_Save, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
	{"Open", 0,  (Fl_Callback*)GUI::cb_Open, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
	{0,0,0,0,0,0,0,0,0}
};

void GUI::cb_Edge_i(Fl_Button*, void*) {
	edge_cb();
}
void GUI::cb_Edge(Fl_Button* o, void* v) {
	((GUI*)(o->parent()->user_data()))->cb_Edge_i(o,v);
}

void GUI::cb_Blur_i(Fl_Button*, void*) {
	blur_cb();
}
void GUI::cb_Blur(Fl_Button* o, void* v) {
	((GUI*)(o->parent()->user_data()))->cb_Blur_i(o,v);
}

void GUI::cb_Brightness_i(Fl_Spinner* o, void*) {
	brightness_cb( o->value() );
}
void GUI::cb_Brightness(Fl_Spinner* o, void* v) {
	((GUI*)(o->parent()->user_data()))->cb_Brightness_i(o,v);
}
void GUI::cb_Contrast_i(Fl_Spinner* o, void*) {
	contrast_cb( o->value() );
}
void GUI::cb_Contrast(Fl_Spinner* o, void* v) {
	((GUI*)(o->parent()->user_data()))->cb_Contrast_i(o,v);
}

void GUI::cb_Line_i(Fl_Button*, void*) {
	line_cb();
}
void GUI::cb_Line(Fl_Button* o, void* v) {
	((GUI*)(o->parent()->parent()->user_data()))->cb_Line_i(o,v);
}
void GUI::cb_Circle_i(Fl_Button*, void*) {
	circle_cb();
}
void GUI::cb_Circle(Fl_Button* o, void* v) {
	((GUI*)(o->parent()->parent()->user_data()))->cb_Circle_i(o,v);
}
void GUI::cb_Fill_i(Fl_Button*, void*) {
	fill_cb();
}
void GUI::cb_Fill(Fl_Button* o, void* v) {
	((GUI*)(o->parent()->parent()->user_data()))->cb_Fill_i(o,v);
}
void GUI::cb_Color_i(Fl_Button*, void*) {
	color_cb();
}
void GUI::cb_Color(Fl_Button* o, void* v) {
	((GUI*)(o->parent()->parent()->user_data()))->cb_Color_i(o,v);
}

#include "scene.h"

GUI::GUI() {
	{ uiw = new Fl_Double_Window(250, 468, "GUI");
	uiw->user_data((void*)(this));
	{ Fl_Button* o = new Fl_Button(65, 410, 100, 50, "DBG");
	o->box(FL_PLASTIC_UP_BOX);
	o->selection_color(FL_DARK_RED);
	o->show();
	o->callback((Fl_Callback*)cb_DBG);
	} // Fl_Button* o
	{ Fl_Menu_Button* o = new Fl_Menu_Button(10, 5, 230, 30, "File");
	o->box(FL_GTK_DOWN_BOX);
	o->menu(menu_File);
	} // Fl_Menu_Button* o
	{ Fl_Button* o = new Fl_Button(10, 70, 100, 50, "Edge Detect");
	o->box(FL_GTK_UP_BOX);
	o->selection_color(FL_DARK_RED);
	o->callback((Fl_Callback*)cb_Edge);
	} // Fl_Button* o
	{ Fl_Button* o = new Fl_Button(10, 130, 100, 50, "Blur");
	o->box(FL_GTK_UP_BOX);
	o->selection_color(FL_DARK_RED);
	o->callback((Fl_Callback*)cb_Blur);
	} // Fl_Button* o
	{ Fl_Spinner* o = new Fl_Spinner(190, 75, 50, 30, "Brightness");
	o->minimum(-100);
	o->value(0);
	o->callback((Fl_Callback*)cb_Brightness);
	o->when(FL_WHEN_CHANGED);
	} // Fl_Spinner* o
	{ Fl_Spinner* o = new Fl_Spinner(190, 150, 50, 30, "Contrast");
	o->minimum(.1);
	o->maximum(10);
	o->value(1);
	o->step(.05);
	o->callback((Fl_Callback*)cb_Contrast);
	o->when(FL_WHEN_CHANGED);
	} // Fl_Spinner* o
	{ Fl_Group* g = new Fl_Group(5, 190, 250, 130);
	l = new Fl_Button(10, 195, 100, 50, "Line");
	l->tooltip("Click twice for line poitns.");
	l->box(FL_GTK_UP_BOX);
	l->down_box(FL_GTK_DOWN_BOX);
	l->selection_color((Fl_Color)137);
	l->selection_color(FL_DARK_RED);
	l->callback((Fl_Callback*)cb_Line);
	// Fl_Button* l
	c = new Fl_Button(10, 255, 100, 50, "Circle");
	c->tooltip("1st: Center 2nd: distance from Center");
	c->box(FL_GTK_UP_BOX);
	c->down_box(FL_GTK_DOWN_BOX);
	c->selection_color((Fl_Color)137);
	c->selection_color(FL_DARK_RED);
	c->callback((Fl_Callback*)cb_Circle);
	// Fl_Button* c
	f = new Fl_Button(120, 265, 60, 30, "Fill");
	f->tooltip("Fills circles");
	f->box(FL_GTK_UP_BOX);
	f->down_box(FL_GTK_DOWN_BOX);
	f->selection_color((Fl_Color)137);
	f->selection_color(FL_DARK_RED);
	f->callback((Fl_Callback*)cb_Fill);
	// Fl_Button* f
	rgb = new Fl_Button(120, 205, 60, 30);
	rgb->tooltip("Pick a Color");
	rgb->box(FL_GTK_DOWN_BOX);
	rgb->color(FL_BLACK);
	rgb->callback((Fl_Callback*)cb_Color);
	// Fl_Button* f
	g->end();
	} // Fl_Group* g
	uiw->end();
	uiw->resizable(uiw);
	} // Fl_Double_Window* uiw
}

int main(int argc, char **argv) {
	scene = new Scene;
	return Fl::run();
}

void GUI::show() {
	uiw->show();
}

void GUI::DBG_cb() {
	scene->DBG();
}

void GUI::new_cb() {
	delete(scene->fb);
	delete(scene);
	scene = new Scene;
}
void GUI::save_cb() {
	scene->save( fl_file_chooser("Image Chooser", "Tiff Files (*.tif)", NULL, 0));
}
void GUI::open_cb() {
	scene->open( fl_file_chooser("Image Chooser", "Tiff Files (*.tif)", NULL, 0));
}

void GUI::edge_cb() {
	scene->edge();
}

void GUI::blur_cb() {
	scene->blur();
}

void GUI::brightness_cb( double value ) {
	scene->brightness((float)value);
}

void GUI::contrast_cb( double value ) {
	scene->contrast((float)value);
}

void GUI::line_cb() {
	l->value() ? l->clear() : l->set() | c->clear();
}
void GUI::circle_cb() {
	c->value() ? c->clear() : c->set() | l->clear();
}

void GUI::fill_cb() {
	f->value() ? f->clear() : f->set();
}

void GUI::color_cb() {
	uchar r = 0, g = 0, b = 0;	
	fl_color_chooser("Color", r, g, b);
	rgb->color( fl_rgb_color(r,g,b) );
}